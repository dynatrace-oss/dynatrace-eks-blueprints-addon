"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynatraceAddOn = void 0;
const helm_addon_1 = require("../helm-addon");
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    name: 'dynatrace-addon',
    namespace: 'dynatrace',
    version: '0.3.0',
    chart: "dynatrace-operator",
    release: "ssp-addon-dynatrace",
    repository: "https://raw.githubusercontent.com/Dynatrace/helm-charts/master/repos/stable"
};
class DynatraceAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        this.addHelmChart(clusterInfo, this.options.values);
    }
}
exports.DynatraceAddOn = DynatraceAddOn;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw4Q0FBOEQ7QUF5QjlEOztHQUVHO0FBQ0gsTUFBTSxZQUFZLEdBQUc7SUFDakIsSUFBSSxFQUFFLGlCQUFpQjtJQUN2QixTQUFTLEVBQUUsV0FBVztJQUN0QixPQUFPLEVBQUUsT0FBTztJQUNoQixLQUFLLEVBQUUsb0JBQW9CO0lBQzNCLE9BQU8sRUFBRSxxQkFBcUI7SUFDOUIsVUFBVSxFQUFFLDZFQUE2RTtDQUM1RixDQUFDO0FBRUYsTUFBYSxjQUFlLFNBQVEsc0JBQVM7SUFJekMsWUFBWSxLQUEyQjtRQUNuQyxLQUFLLENBQUMsRUFBQyxHQUFHLFlBQVksRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDcEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQzlCLENBQUM7SUFFRCxNQUFNLENBQUMsV0FBd0I7UUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN4RCxDQUFDO0NBQ0o7QUFaRCx3Q0FZQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsdXN0ZXJJbmZvIH0gZnJvbSBcIi4uLy4uL3NwaVwiO1xuaW1wb3J0IHsgSGVsbUFkZE9uLCBIZWxtQWRkT25Vc2VyUHJvcHMgfSBmcm9tIFwiLi4vaGVsbS1hZGRvblwiO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgdGhlIGFkZC1vbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEeW5hdHJhY2VBZGRPblByb3BzIGV4dGVuZHMgSGVsbUFkZE9uVXNlclByb3BzIHtcblxuICAgIC8qKlxuICAgICAqIE5hbWVzcGFjZSB3aGVyZSBDYWxpY28gd2lsbCBiZSBpbnN0YWxsZWRcbiAgICAgKiBAZGVmYXVsdCBrdWJlLXN5c3RlbVxuICAgICAqL1xuICAgIG5hbWVzcGFjZT86IHN0cmluZztcblxuICAgIC8qKlxuICAgICAqIEhlbG0gY2hhcnQgdmVyc2lvbiB0byB1c2UgdG8gaW5zdGFsbC5cbiAgICAgKiBAZGVmYXVsdCAwLjMuMTBcbiAgICAgKi9cbiAgICB2ZXJzaW9uPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVmFsdWVzIGZvciB0aGUgSGVsbSBjaGFydC5cbiAgICAgKi9cbiAgICB2YWx1ZXM/OiBhbnk7XG59XG5cbi8qKlxuICogRGVmYXVsdHMgb3B0aW9ucyBmb3IgdGhlIGFkZC1vblxuICovXG5jb25zdCBkZWZhdWx0UHJvcHMgPSB7XG4gICAgbmFtZTogJ2R5bmF0cmFjZS1hZGRvbicsXG4gICAgbmFtZXNwYWNlOiAnZHluYXRyYWNlJyxcbiAgICB2ZXJzaW9uOiAnMC4zLjAnLFxuICAgIGNoYXJ0OiBcImR5bmF0cmFjZS1vcGVyYXRvclwiLFxuICAgIHJlbGVhc2U6IFwic3NwLWFkZG9uLWR5bmF0cmFjZVwiLFxuICAgIHJlcG9zaXRvcnk6IFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0R5bmF0cmFjZS9oZWxtLWNoYXJ0cy9tYXN0ZXIvcmVwb3Mvc3RhYmxlXCJcbn07XG5cbmV4cG9ydCBjbGFzcyBEeW5hdHJhY2VBZGRPbiBleHRlbmRzIEhlbG1BZGRPbiB7XG5cbiAgICBwcml2YXRlIG9wdGlvbnM6IER5bmF0cmFjZUFkZE9uUHJvcHM7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcz86IER5bmF0cmFjZUFkZE9uUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoey4uLmRlZmF1bHRQcm9wcywgLi4ucHJvcHMgfSk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IHRoaXMucHJvcHM7XG4gICAgfVxuXG4gICAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IHZvaWQge1xuICAgICAgICB0aGlzLmFkZEhlbG1DaGFydChjbHVzdGVySW5mbywgdGhpcy5vcHRpb25zLnZhbHVlcyk7XG4gICAgfVxufVxuIl19